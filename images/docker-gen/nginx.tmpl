{{ define "upstream" }}
  {{ if .Address }}
    {{/* If we got the containers from swarm and this container's port is published to host, use host IP:PORT */}}
    {{ if and .Container.Node.ID .Address.HostPort }}
  # {{ .Container.Node.Name }}/{{ .Container.Name }}
  server {{ .Container.Node.Address.IP }}:{{ .Address.HostPort }};
    {{/* If there is no swarm node or the port is not published on host, use container's IP:PORT */}}
    {{ else }}
  # {{ .Container.Name }}
  server {{ .Address.IP }}:{{ .Address.Port }};
    {{ end }}
  {{ else }}
  # {{ .Container.Name }}
  server {{ .Container.IP }} down;
  {{ end }}
{{ end }}

# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
  map $http_x_forwarded_proto $proxy_x_forwarded_proto {
    default $http_x_forwarded_proto;
    '' $scheme;
  }

# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
  map $http_upgrade $proxy_connection {
    default upgrade;
    '' close;
  }

# Enables gzipping of responses for the specified MIME types
  gzip_types application/javascript application/json application/x-javascript application/xml application/xml+rss text/css text/javascript text/plain text/xml;

# Setup log default settings
  access_log off;
  log_format vhost '$host $remote_addr - $remote_user [$time_local] '
                   '"$request" $status $body_bytes_sent '
                   '"$http_referer" "$http_user_agent"';

# Proxy headers
{{ if (exists "/etc/nginx/proxy.conf") }}
  include /etc/nginx/proxy.conf;
{{ else }}
  proxy_http_version 1.1;
  proxy_buffering off;
  proxy_request_buffering off;
  client_max_body_size 0;
  proxy_set_header Host $http_host;
  proxy_set_header Upgrade $http_upgrade;
  proxy_set_header Connection $proxy_connection;
  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  #proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
  proxy_set_header X-Forwarded-Proto $scheme;
{{ end }}

# Default HTTP host
server {
  server_name _;
  listen 80;
  access_log /var/log/nginx/access.log vhost;

  return 503;
}

{{ if (and (exists "/etc/nginx/cert.d/default.pem") (exists "/etc/nginx/cert.d/default.key")) }}
# Default HTTPS host
server {
  server_name _;
  listen 443 ssl http2;
  access_log /var/log/nginx/access.log vhost;

  ssl_certificate /etc/nginx/cert.d/default.pem;
  ssl_certificate_key /etc/nginx/cert.d/default.key;

  return 503;
}
{{ end }}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}
# {{ $host }}
upstream {{ $host }} {
{{ range $container := $containers }}
  {{ $addrLen := len $container.Addresses }}
  {{/* If only 1 port exposed, use that */}}
  {{ if eq $addrLen 1 }}
    {{ $address := index $container.Addresses 0 }}
    {{ template "upstream" (dict "Container" $container "Address" $address) }}
  {{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var, falling back to standard web port 80 */}}
  {{ else }}
    {{ $port := coalesce $container.Env.VIRTUAL_PORT "80" }}
    {{ $address := where $container.Addresses "Port" $port | first }}
    {{ template "upstream" (dict "Container" $container "Address" $address) }}
  {{ end }}
{{ end }}
}

{{ $default_host := or ($.Env.DEFAULT_HOST) "" }}
{{ $default_server := index (dict $host "" $default_host "default_server") $host }}

{{/* Get the VIRTUAL_PROTO defined by containers w/ the same vhost, falling back to "http" */}}
{{ $proto := or (first (groupByKeys $containers "Env.VIRTUAL_PROTO")) "http" }}

{{/* Get the ALLOW_HTTPS defined by containers w/ the same vhost, falling back to "true" */}}
{{ $allow_https := or (first (groupByKeys $containers "Env.ALLOW_HTTPS")) "true" }}
{{ $allow_https := parseBool $allow_https }}

{{/* Get the FORCE_HTTPS defined by containers w/ the same vhost, falling back to "false" */}}
{{ $force_https := or (first (groupByKeys $containers "Env.FORCE_HTTPS")) "false" }}
{{ $force_https := parseBool $force_https }}

{{/* Get the first cert name defined by containers w/ the same vhost */}}
{{ $certName := (first (groupByKeys $containers "Env.CERT_NAME")) }}
{{ $certName := when (and (exists (printf "/etc/nginx/cert.d/%s.pem" $certName)) (exists (printf "/etc/nginx/cert.d/%s.pem" $certName))) $certName nil }}

{{/* Get the best matching cert by name for the vhost. */}}
{{ $vhostCert := (closest (dir "/etc/nginx/cert.d") (printf "%s.pem" $host))}}

{{/* vhostCert is actually a filename so remove any suffixes since they are added later */}}
{{ $vhostCert := replace $vhostCert ".pem" "" -1 }}
{{ $vhostCert := replace $vhostCert ".key" "" -1 }}
{{ $vhostCert := when (eq $vhostCert "") nil $vhostCert }}

{{/* Get the default cert */}}
{{ $defaultCert := when (and (exists "/etc/nginx/cert.d/default.pem") (exists "/etc/nginx/cert.d/default.pem")) "default" nil }}

{{/* Use the cert specifid on the container or fallback to the best vhost match */}}
{{ $cert := coalesce $certName $vhostCert $defaultCert }}

{{ if ($force_https) }}
server {
  server_name {{ $host }};
  listen 80 {{ $default_server }};
  access_log /var/log/nginx/access.log vhost;

  return 301 https://$host$request_uri;
}
{{ else }}
server {
  server_name {{ $host }};
  listen 80 {{ $default_server }};
  access_log /var/log/nginx/access.log vhost;

  {{ if (exists (printf "/etc/nginx/vhost.d/%s" $host)) }}
  include {{ printf "/etc/nginx/vhost.d/%s" $host }};
  {{ else if (exists "/etc/nginx/vhost.d/default") }}
  #include /etc/nginx/vhost.d/default;
  {{ end }}

  location /.well-known/ {
    auth_basic off;
    root /usr/share/nginx/html;
    try_files $uri =404;
  }

  location / {
    proxy_pass {{ trim $proto }}://{{ trim $host }};

    {{ if (exists (printf "/etc/nginx/htpasswd.d/%s" $host)) }}
    auth_basic "Restricted {{ $host }}";
    auth_basic_user_file {{ (printf "/etc/nginx/htpasswd.d/%s" $host) }};
    {{ end }}

    {{ if (exists (printf "/etc/nginx/vhost.d/%s_location" $host)) }}
    include {{ printf "/etc/nginx/vhost.d/%s_location" $host}};
    {{ else if (exists "/etc/nginx/vhost.d/default_location") }}
    #include /etc/nginx/vhost.d/default_location;
    {{ end }}
  }
}
{{ end  }}

{{ if (and ($allow_https) (ne $cert "")) }}
server {
  server_name {{ $host }};
  listen 443 ssl http2 {{ $default_server }};
  access_log /var/log/nginx/access.log vhost;

  ssl_certificate /etc/nginx/cert.d/{{ (printf "%s.pem" $cert) }};
  ssl_certificate_key /etc/nginx/cert.d/{{ (printf "%s.key" $cert) }};
  {{ if (exists (printf "/etc/nginx/cert.d/%s.dhparam.pem" $cert)) }}
  ssl_dhparam {{ printf "/etc/nginx/cert.d/%s.dhparam.pem" $cert }};
  {{ end }}

  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA;
  ssl_prefer_server_ciphers on;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_session_cache shared:SSL:50m;
  ssl_session_timeout 5m;

  add_header Strict-Transport-Security "max-age=31536000";

  {{ if (exists (printf "/etc/nginx/vhost.d/%s" $host)) }}
  include {{ printf "/etc/nginx/vhost.d/%s" $host }};
  {{ else if (exists "/etc/nginx/vhost.d/default") }}
  #include /etc/nginx/vhost.d/default;
  {{ end }}

  location /.well-known/ {
    auth_basic off;
    root /usr/share/nginx/html;
    try_files $uri =404;
  }

  location / {
    proxy_pass {{ trim $proto }}://{{ trim $host }};

    {{ if (exists (printf "/etc/nginx/htpasswd.d/%s" $host)) }}
    auth_basic "Restricted {{ $host }}";
    auth_basic_user_file {{ (printf "/etc/nginx/htpasswd.d/%s" $host) }};
    {{ end }}

    {{ if (exists (printf "/etc/nginx/vhost.d/%s_location" $host)) }}
    include {{ printf "/etc/nginx/vhost.d/%s_location" $host}};
    {{ else if (exists "/etc/nginx/vhost.d/default_location") }}
    #include /etc/nginx/vhost.d/default_location;
    {{ end }}
  }
}
{{ else if (ne $cert "") }}
server {
  server_name {{ $host }};
  listen 443 ssl http2 {{ $default_server }};
  access_log /var/log/nginx/access.log vhost;

  ssl_certificate /etc/nginx/cert.d/{{ (printf "%s.pem" $cert) }};
  ssl_certificate_key /etc/nginx/cert.d/{{ (printf "%s.key" $cert) }};

  return 503;
}
{{ end }}

{{ end }}
